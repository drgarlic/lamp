#!/usr/bin/env bash
#
#   \|/   '||     ^   ||\/| ||''.
#  - o -   ||    //\  ||  | ||--'
#   /|\   .||_| //''\ ||  | ||
#
# Description:              A deamon-less terminal effect manager
# Dependencies:             art, xdotool
# Optionnal dependencies:   none
# Author:                   gawlk
# Contributors:             none

# ---
# TODO
# ---
#
# - Add more modes
# - Find a better way to determined which terminal is being focused

# ---
# IMPORTS
# ---

. art-api

# ---
# SETUP
# ---

# Disable unicode.
LC_ALL=C
LANG=C

# Get all arguments
args=( $@ )

# Get the number of arguments
nb_args="$#"

# Global variables
refresh=false
cach_file="${cnf_dir}/.lamp.cache"
modes=""
fcs_colors=( )
unf_colors=( )

# ---
# LOCAL
# ---

lamp.arguments() {
    local i=0

    # Loop that will go through each and every argument
    while [[ $i != $nb_args ]]
    do
        case "${args[$i]}" in
            "-f" | "-force" )
                # Force the refresh of the cache

                refresh=true
            ;;
            "-h" | "-help" )
                # Display a helping text and exit
                
                printf '\n%s\n\n'   "lamp - A deamon-less terminal effect manager"

                printf '%s\n\n'   "Example: lamp -m \"4+2+1\""

                printf '%s\n'     "Arguments:"
                printf '%s\n'     "(none)                  Launch lamp"
                printf '%s\n'     "-f | -force             Force the refresh of the cache"
                printf '%s\n'     "-h | -help              Display this menu and exit"
                printf '%s\n'     "-m | -modes \"number\"    Set a different mode or modes to load"
                printf '%s\n\n'   "-t | -terminal \"name\"   Fix for terminal launch"

                exit 0
            ;;
            "-m" | "-modes" )
                # Choose the mode or modes to load

                (( i++ ))
                checkers.is_argument_s_value "${args[$i]}" || log.error "lamp" "Please provide correct values to arguments."

                modes="${args[$i]}"
            ;;
            "-t" | "-terminal" )
                # Fix for terminal launch

                (( i++ ))
                checkers.is_argument_s_value "${args[$i]}" || log.error "lamp" "Please provide correct values to arguments."

                local term="${args[$i]}"
                "$term" &

                sleep 0.2
            ;;
            * )
                # Display an error on invalid arguments

                log.error "lamp" "Invalid argument, please try again\n$( lamp -h )"
            ;;
        esac

        (( i++ ))
    done
}

lamp.gen_cach_file() {
    local theme="$( art-api.get_theme )"
    local brightness="$( art-api.get_brightness )"

    printf '%s\n'   "[global]"                         > "$cach_file"
    printf '%s\n\n' "    modes = ${modes}"            >> "$cach_file"

    printf '%s\n'   "[art]"                           >> "$cach_file"
    printf '%s\n'   "    theme = ${theme}"            >> "$cach_file"
    printf '%s\n\n' "    brightness = ${brightness}"  >> "$cach_file"

    printf '%s\n'   "[colors]"                        >> "$cach_file"
    printf '%s\n'   "    fcs_blk = ${fcs_colors[0]}"  >> "$cach_file"
    printf '%s\n'   "    fcs_gry = ${fcs_colors[1]}"  >> "$cach_file"
    printf '%s\n'   "    fcs_red = ${fcs_colors[2]}"  >> "$cach_file"
    printf '%s\n'   "    fcs_grn = ${fcs_colors[3]}"  >> "$cach_file"
    printf '%s\n'   "    fcs_blu = ${fcs_colors[4]}"  >> "$cach_file"
    printf '%s\n\n' "    fcs_wht = ${fcs_colors[5]}"  >> "$cach_file"

    printf '%s\n'   "    unf_blk = ${unf_colors[0]}"  >> "$cach_file"
    printf '%s\n'   "    unf_gry = ${unf_colors[1]}"  >> "$cach_file"
    printf '%s\n'   "    unf_red = ${unf_colors[2]}"  >> "$cach_file"
    printf '%s\n'   "    unf_grn = ${unf_colors[3]}"  >> "$cach_file"
    printf '%s\n'   "    unf_blu = ${unf_colors[4]}"  >> "$cach_file"
    printf '%s\n'   "    unf_wht = ${unf_colors[5]}"  >> "$cach_file"
}

lamp.mode1_unfocus_color() {
    local color_in_hsv=( $( converters.hex_to_hsv "$1" ) )
    
    local value="$2"
    [[ "$3" == "dark" ]] && value=$(( - value ))

    local V="${color_in_hsv[2]}"
    (( V += value ))
    [[ $V -lt 0 ]] && V=0
    [[ $V -gt 1000 ]] && V=1000

    converters.hsv_to_hex "${color_in_hsv[0]}" "${color_in_hsv[1]}" "$V"
}

lamp.mode4_unfocus_color() {
    local color_in_hsv=( $( converters.hex_to_hsv "$1" ) )

    converters.hsv_to_hex "${color_in_hsv[0]}" "0" "${color_in_hsv[2]}"
}

lamp.read_colors() {
    fcs_colors=( $( initiators.read_line "$cach_file" "fcs_[a-z]{3}" ) )

    unf_colors=( $( initiators.read_line "$cach_file" "unf_[a-z]{3}" ) )
}

lamp.read_conf() {
    local old_theme="$( initiators.read_line "$cach_file" "theme" )"
    local old_brightness="$( initiators.read_line "$cach_file" "brightness" )"

    local theme="$( art-api.get_theme )"
    [[ -z "$theme" ]] && log.error "lamp" "Invalid theme in art's configuration file."
    local brightness="$( art-api.get_brightness )"
    [[ -z "$brightness" ]] && log.error "lamp" "Invalid brightness in art's configuration file."

    [[ -n "$modes" || "$theme" != "$old_theme" || "$brightness" != "$old_brightness" ]] && refresh=true

    [[ -z "$modes" ]] && modes="$( initiators.read_line "$cach_file" "modes" )"
}

lamp.update_unfocused_terminals() {
    for term in "/dev/pts/"[0-9]*
    do  
        [[ -w "$term" ]] && [[ "$term" != "$1" ]] && ( printf "%b" "$2" > "$term" & )
    done
}

# ---
# MAIN
# ---

lamp.main() {
    lamp.arguments
    
    # Check if the focused window is a terminal
    local focused_window="$( xdotool getwindowfocus getwindowname )"
    
    if [[ -n "$focused_window" && "$focused_window" == "/dev/pts/"* ]]
    then
        lamp.read_conf
        
        if [[ "$refresh" == true ]]
        then
            local theme="$( art-api.get_theme )"
            local brightness="$( art-api.get_brightness )"

            local list_modes=( $( pure.split "$modes" "+" ) )
            local nb_modes=${#list_modes[@]}

            fcs_colors=( $( art-api.get_colors ) )
            unf_colors=( ${fcs_colors[@]} )

            local i=0

            # Loop that will go through each and every mdoe
            while [[ $i != $nb_modes ]]
            do
                case "${list_modes[$i]}" in
                    "0" )
                        # Normal mode

                        # Nothing to do
                    ;;
                    "1" )
                        # Highlight mode

                        # Generate unfocused colors
                        local value=200
                        local unf_blk="${unf_colors[0]}"
                        local unf_gry="$( lamp.mode1_unfocus_color "${unf_colors[1]}" "$value" "$brightness" )"
                        local unf_red="$( lamp.mode1_unfocus_color "${unf_colors[2]}" "$value" "$brightness" )"
                        local unf_grn="$( lamp.mode1_unfocus_color "${unf_colors[3]}" "$value" "$brightness" )"
                        local unf_blu="$( lamp.mode1_unfocus_color "${unf_colors[4]}" "$value" "$brightness" )"
                        (( value *= 2 ))
                        local unf_wht="$( lamp.mode1_unfocus_color "${unf_colors[5]}" "$value" "$brightness" )"

                        unf_colors=( "$unf_blk" "$unf_gry" "$unf_red" "$unf_grn" "$unf_blu" "$unf_wht" )
                    ;;
                    "2" )
                        # Yin yang mode

                        [[ "$brightness" == "dark" ]] && brightness="light" || brightness="dark"

                        fcs_colors=( $( art-api.get_colors ) )

                        [[ "$brightness" == "dark" ]] && brightness="light" || brightness="dark"
                    ;;
                    "3" )
                        # Stealth mode

                        local blk="${unf_colors[0]}"

                        unf_colors=( "$blk" "$blk" "$blk" "$blk" "$blk" "$blk" )
                    ;;
                    "4" )
                        # Black & white mode

                        # Generate unfosed colors
                        local unf_blk="$( lamp.mode4_unfocus_color "${unf_colors[0]}" )"
                        local unf_gry="$( lamp.mode4_unfocus_color "${unf_colors[1]}" )"
                        local unf_red="$( lamp.mode4_unfocus_color "${unf_colors[2]}" )"
                        local unf_grn="$( lamp.mode4_unfocus_color "${unf_colors[3]}" )"
                        local unf_blu="$( lamp.mode4_unfocus_color "${unf_colors[4]}" )"
                        local unf_wht="$( lamp.mode4_unfocus_color "${unf_colors[5]}" )"

                        unf_colors=( "$unf_blk" "$unf_gry" "$unf_red" "$unf_grn" "$unf_blu" "$unf_wht" )
                    ;;
                    * )
                        log.error "lamp" "Please choose a correct mode number."
                    ;;
                esac

                (( i++ ))
            done
            
            lamp.gen_cach_file
        else
            lamp.read_colors
        fi
            
        # Update the focused terminals
        local sequences="$( printf "\\033]10;${fcs_colors[5]}\\007\\033]11;${fcs_colors[0]}\\007\\033]12;${fcs_colors[5]}\\007\\033]13;${fcs_colors[5]}\\007\\033]14;${fcs_colors[0]}\\007\\033]708;${fcs_colors[0]}\\007\\033]4;0;${fcs_colors[0]}\\007\\033]4;8;${fcs_colors[1]}\\007\\033]4;1;${fcs_colors[2]}\\007\\033]4;5;${fcs_colors[2]}\\007\\033]4;9;${fcs_colors[2]}\\007\\033]4;13;${fcs_colors[2]}\\007\\033]4;2;${fcs_colors[3]}\\007\\033]4;3;${fcs_colors[3]}\\007\\033]4;10;${fcs_colors[3]}\\007\\033]4;11;${fcs_colors[3]}\\007\\033]4;4;${fcs_colors[4]}\\007\\033]4;6;${fcs_colors[4]}\\007\\033]4;12;${fcs_colors[4]}\\007\\033]4;14;${fcs_colors[4]}\\007\\033]4;7;${fcs_colors[5]}\\007\\033]4;15;${fcs_colors[5]}\\007\\033]4;66;${fcs_colors[0]}\\007" )"
        printf '%b' "$sequences" > "$focused_window" &
    fi
        
    # Update unfocused terminals
    sequences="$( printf "\\033]10;${unf_colors[5]}\\007\\033]11;${unf_colors[0]}\\007\\033]12;${unf_colors[5]}\\007\\033]13;${unf_colors[5]}\\007\\033]14;${unf_colors[0]}\\007\\033]708;${unf_colors[0]}\\007\\033]4;0;${unf_colors[0]}\\007\\033]4;8;${unf_colors[1]}\\007\\033]4;1;${unf_colors[2]}\\007\\033]4;5;${unf_colors[2]}\\007\\033]4;9;${unf_colors[2]}\\007\\033]4;13;${unf_colors[2]}\\007\\033]4;2;${unf_colors[3]}\\007\\033]4;3;${unf_colors[3]}\\007\\033]4;10;${unf_colors[3]}\\007\\033]4;11;${unf_colors[3]}\\007\\033]4;4;${unf_colors[4]}\\007\\033]4;6;${unf_colors[4]}\\007\\033]4;12;${unf_colors[4]}\\007\\033]4;14;${unf_colors[4]}\\007\\033]4;7;${unf_colors[5]}\\007\\033]4;15;${unf_colors[5]}\\007\\033]4;66;${unf_colors[0]}\\007" )"
    lamp.update_unfocused_terminals "$focused_window" "$sequences"
}

# ---
# LAUNCH
# ---

lamp.main

